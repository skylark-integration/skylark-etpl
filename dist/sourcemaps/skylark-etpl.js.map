{"version":3,"sources":["skylark-etpl.js"],"names":["define","skylark","extend","target","source","key","hasOwnProperty","Stack","this","raw","length","prototype","push","elem","pop","top","bottom","find","condition","index","item","guidIndex","generateGUID","inherits","subClass","superClass","subClassProto","F","Function","constructor","HTML_ENTITY","&","<",">","\"","'","htmlFilterReplacer","c","DEFAULT_FILTERS","html","replace","url","encodeURIComponent","stringLiteralize","regexpLiteral","stringFormat","args","arguments","match","RENDER_STRING_DECLATION","RENDER_STRING_ADD_START","RENDER_STRING_ADD_END","RENDER_STRING_RETURN","ieVersionMatch","navigator","userAgent","parseTextBlock","open","close","greedy","onInBlock","onOutBlock","closeLen","texts","split","level","buf","i","len","text","openBegin","closeIndex","indexOf","slice","join","compileVariable","engine","forText","defaultFilter","code","options","toStringHead","toStringFoot","wrapHead","wrapFoot","variableOpen","variableClose","name","filterCharIndex","variableName","filterSource","variableRawValue","variableCode","filterSegs","seg","segMatch","unshift","TextNode","value","Command","children","cloneProps","autoCloseCommand","context","CommandType","stack","closeEnd","node","autoClose","Error","type","getRendererBody","strip","test","clone","addChild","parent","Clazz","l","prop","RENDERER_BODY_START","TargetCommand","master","call","blocks","BlockCommand","ImportCommand","VarCommand","expr","FilterCommand","UseCommand","ForCommand","rule","RegExp","list","IfCommand","ElifCommand","ElseCommand","init","deps","TargetState","READING","READED","APPLIED","READY","addCommandType","Type","commandTypes","Engine","commandOpen","commandClose","commandSyntax","config","targets","filters","parseSource","NodeType","analyseContext","textBuf","flushTextBuf","textNode","beforeAdd","current","nodeName","exec","toLowerCase","currentNode","beforeOpen","applyMaster","masterName","state","replaceBlock","Array","child","missTarget","isReady","targetName","readyState","checkReadyState","getRenderer","renderer","realRenderer","data","namingConflict","addTargetToContext","elseCommand","ifCommand","parentChildren","apply","start","argName","compile","parse","parseInfo","targetNames","render","addCommand","command","addFilter","filter","etpl","version","util","attach","main"],"mappings":"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","file":"../skylark-etpl.js","sourcesContent":["define('skylark-etpl/main',[\n    \"skylark-langx/skylark\"\n],function(skylark){\n    /**\n     * ETPL (Enterprise Template)\n     * Copyright 2013 Baidu Inc. All rights reserved.\n     *\n     * @file 模板引擎\n     * @author errorrik(errorrik@gmail.com)\n     *         otakustay(otakustay@gmail.com)\n     */\n\n\n    // HACK: 可见的重复代码未抽取成function和var是为了gzip size，吐槽的一边去\n    /* eslint-env node */\n\n    /**\n     * 对象属性拷贝\n     *\n     * @inner\n     * @param {Object} target 目标对象\n     * @param {Object} source 源对象\n     * @return {Object} 返回目标对象\n     */\n    function extend(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n\n        return target;\n    }\n\n    /**\n     * 随手写了个栈\n     *\n     * @inner\n     * @constructor\n     */\n    function Stack() {\n        this.raw = [];\n        this.length = 0;\n    }\n\n    Stack.prototype = {\n        /**\n         * 添加元素进栈\n         *\n         * @param {*} elem 添加项\n         */\n        push: function (elem) {\n            this.raw[this.length++] = elem;\n        },\n\n        /**\n         * 弹出顶部元素\n         *\n         * @return {*} 顶部元素\n         */\n        pop: function () {\n            if (this.length > 0) {\n                var elem = this.raw[--this.length];\n                this.raw.length = this.length;\n                return elem;\n            }\n        },\n\n        /**\n         * 获取顶部元素\n         *\n         * @return {*} 顶部元素\n         */\n        top: function () {\n            return this.raw[this.length - 1];\n        },\n\n        /**\n         * 获取底部元素\n         *\n         * @return {*} 底部元素\n         */\n        bottom: function () {\n            return this.raw[0];\n        },\n\n        /**\n         * 根据查询条件获取元素\n         *\n         * @param {Function} condition 查询函数\n         * @return {*} 符合条件的元素\n         */\n        find: function (condition) {\n            var index = this.length;\n            while (index--) {\n                var item = this.raw[index];\n                if (condition(item)) {\n                    return item;\n                }\n            }\n        }\n    };\n\n    /**\n     * 唯一id的起始值\n     *\n     * @inner\n     * @type {number}\n     */\n    var guidIndex = 0x2B845;\n\n    /**\n     * 获取唯一id，用于匿名target或编译代码的变量名生成\n     *\n     * @inner\n     * @return {string} 唯一id\n     */\n    function generateGUID() {\n        return '___' + (guidIndex++);\n    }\n\n    /**\n     * 构建类之间的继承关系\n     *\n     * @inner\n     * @param {Function} subClass 子类函数\n     * @param {Function} superClass 父类函数\n     */\n    function inherits(subClass, superClass) {\n        /* jshint -W054 */\n        var subClassProto = subClass.prototype;\n        var F = new Function();\n        F.prototype = superClass.prototype;\n        subClass.prototype = new F();\n        subClass.prototype.constructor = subClass;\n        extend(subClass.prototype, subClassProto);\n        /* jshint +W054 */\n    }\n\n    /**\n     * HTML Filter替换的字符实体表\n     *\n     * @const\n     * @inner\n     * @type {Object}\n     */\n    var HTML_ENTITY = {\n        /* jshint ignore:start */\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        /* eslint-disable quotes */\n        \"'\": '&#39;'\n        /* eslint-enable quotes */\n        /* jshint ignore:end */\n    };\n\n    /**\n     * HTML Filter的替换函数\n     *\n     * @inner\n     * @param {string} c 替换字符\n     * @return {string} 替换后的HTML字符实体\n     */\n    function htmlFilterReplacer(c) {\n        return HTML_ENTITY[c];\n    }\n\n    /**\n     * 默认filter\n     *\n     * @inner\n     * @const\n     * @type {Object}\n     */\n    var DEFAULT_FILTERS = {\n        /**\n         * HTML转义filter\n         *\n         * @param {string} source 源串\n         * @return {string} 替换结果串\n         */\n        html: function (source) {\n            return source.replace(/[&<>\"']/g, htmlFilterReplacer);\n        },\n\n        /**\n         * URL编码filter\n         *\n         * @param {string} source 源串\n         * @return {string} 替换结果串\n         */\n        url: encodeURIComponent,\n\n        /**\n         * 源串filter，用于在默认开启HTML转义时获取源串，不进行转义\n         *\n         * @param {string} source 源串\n         * @return {string} 替换结果串\n         */\n        raw: function (source) {\n            return source;\n        }\n    };\n\n    /**\n     * 字符串字面化\n     *\n     * @inner\n     * @param {string} source 需要字面化的字符串\n     * @return {string} 字符串字面化结果\n     */\n    function stringLiteralize(source) {\n        return '\"'\n            + source\n                .replace(/\\x5C/g, '\\\\\\\\')\n                .replace(/\"/g, '\\\\\"')\n                .replace(/\\x0A/g, '\\\\n')\n                .replace(/\\x09/g, '\\\\t')\n                .replace(/\\x0D/g, '\\\\r')\n                // .replace( /\\x08/g, '\\\\b' )\n                // .replace( /\\x0C/g, '\\\\f' )\n            + '\"';\n    }\n\n    /**\n     * 对字符串进行可用于new RegExp的字面化\n     *\n     * @inner\n     * @param {string} source 需要字面化的字符串\n     * @return {string} 字符串字面化结果\n     */\n    function regexpLiteral(source) {\n        return source.replace(/[\\^\\[\\]\\$\\(\\)\\{\\}\\?\\*\\.\\+]/g, function (c) {\n            return '\\\\' + c;\n        });\n    }\n\n    /**\n     * 字符串格式化\n     *\n     * @inner\n     * @param {string} source 目标模版字符串\n     * @param {...string} replacements 字符串替换项集合\n     * @return {string} 格式化结果\n     */\n    function stringFormat(source) {\n        var args = arguments;\n        return source.replace(\n            /\\{([0-9]+)\\}/g,\n            function (match, index) {\n                return args[index - 0 + 1];\n            });\n    }\n\n    /**\n     * 用于render的字符串变量声明语句\n     *\n     * @inner\n     * @const\n     * @type {string}\n     */\n    var RENDER_STRING_DECLATION = 'var r=\"\";';\n\n    /**\n     * 用于render的字符串内容添加语句（起始）\n     *\n     * @inner\n     * @const\n     * @type {string}\n     */\n    var RENDER_STRING_ADD_START = 'r+=';\n\n    /**\n     * 用于render的字符串内容添加语句（结束）\n     *\n     * @inner\n     * @const\n     * @type {string}\n     */\n    var RENDER_STRING_ADD_END = ';';\n\n    /**\n     * 用于render的字符串内容返回语句\n     *\n     * @inner\n     * @const\n     * @type {string}\n     */\n    var RENDER_STRING_RETURN = 'return r;';\n\n    // HACK: IE8-时，编译后的renderer使用join Array的策略进行字符串拼接\n    var ieVersionMatch = typeof navigator !== 'undefined'\n        && navigator.userAgent.match(/msie\\s*([0-9]+)/i);\n\n    if (ieVersionMatch && ieVersionMatch[1] - 0 < 8) {\n        RENDER_STRING_DECLATION = 'var r=[],ri=0;';\n        RENDER_STRING_ADD_START = 'r[ri++]=';\n        RENDER_STRING_RETURN = 'return r.join(\"\");';\n    }\n\n    /**\n     * 将访问变量名称转换成getVariable调用的编译语句\n     * 用于if、var等命令生成编译代码\n     *\n     * @inner\n     * @param {string} name 访问变量名\n     * @return {string} getVariable调用的编译语句\n     */\n    function toGetVariableLiteral(name) {\n        name = name.replace(/^\\s*\\*/, '');\n        return stringFormat(\n            'gv({0},[\"{1}\"])',\n            stringLiteralize(name),\n            name.replace(\n                    /\\[['\"]?([^'\"]+)['\"]?\\]/g,\n                    function (match, name) {\n                        return '.' + name;\n                    }\n                )\n                .split('.')\n                .join('\",\"')\n        );\n    }\n\n    /**\n     * 解析文本片段中以固定字符串开头和结尾的包含块\n     * 用于 命令串：<!-- ... --> 和 变量替换串：${...} 的解析\n     *\n     * @inner\n     * @param {string} source 要解析的文本\n     * @param {string} open 包含块开头\n     * @param {string} close 包含块结束\n     * @param {boolean} greedy 是否贪婪匹配\n     * @param {function({string})} onInBlock 包含块内文本的处理函数\n     * @param {function({string})} onOutBlock 非包含块内文本的处理函数\n     */\n    function parseTextBlock(source, open, close, greedy, onInBlock, onOutBlock) {\n        var closeLen = close.length;\n        var texts = source.split(open);\n        var level = 0;\n        var buf = [];\n\n        for (var i = 0, len = texts.length; i < len; i++) {\n            var text = texts[i];\n\n            if (i) {\n                var openBegin = 1;\n                level++;\n                /* eslint-disable no-constant-condition */\n                while (1) {\n                    var closeIndex = text.indexOf(close);\n                    if (closeIndex < 0) {\n                        buf.push(level > 1 && openBegin ? open : '', text);\n                        break;\n                    }\n\n                    level = greedy ? level - 1 : 0;\n                    buf.push(\n                        level > 0 && openBegin ? open : '',\n                        text.slice(0, closeIndex),\n                        level > 0 ? close : ''\n                    );\n                    text = text.slice(closeIndex + closeLen);\n                    openBegin = 0;\n\n                    if (level === 0) {\n                        break;\n                    }\n                }\n                /* eslint-enable no-constant-condition */\n\n                if (level === 0) {\n                    onInBlock(buf.join(''));\n                    onOutBlock(text);\n                    buf = [];\n                }\n            }\n            else {\n                text && onOutBlock(text);\n            }\n        }\n\n        if (level > 0 && buf.length > 0) {\n            onOutBlock(open);\n            onOutBlock(buf.join(''));\n        }\n    }\n\n    /**\n     * 编译变量访问和变量替换的代码\n     * 用于普通文本或if、var、filter等命令生成编译代码\n     *\n     * @inner\n     * @param {string} source 源代码\n     * @param {Engine} engine 引擎实例\n     * @param {boolean} forText 是否为输出文本的变量替换\n     * @return {string} 编译代码\n     */\n    function compileVariable(source, engine, forText) {\n        var code = [];\n        var options = engine.options;\n\n        var toStringHead = '';\n        var toStringFoot = '';\n        var wrapHead = '';\n        var wrapFoot = '';\n\n        // 默认的filter，当forText模式时有效\n        var defaultFilter;\n\n        if (forText) {\n            toStringHead = 'ts(';\n            toStringFoot = ')';\n            wrapHead = RENDER_STRING_ADD_START;\n            wrapFoot = RENDER_STRING_ADD_END;\n            defaultFilter = options.defaultFilter;\n        }\n\n        parseTextBlock(\n            source, options.variableOpen, options.variableClose, 1,\n\n            function (text) {\n                // 加入默认filter\n                // 只有当处理forText时，需要加入默认filter\n                // 处理if/var/use等command时，不需要加入默认filter\n                if (forText && text.indexOf('|') < 0 && defaultFilter) {\n                    text += '|' + defaultFilter;\n                }\n\n                // variableCode是一个gv调用，然后通过循环，在外面包filter的调用\n                // 形成filter[\"b\"](filter[\"a\"](gv(...)))\n                //\n                // 当forText模式，处理的是文本中的变量替换时\n                // 传递给filter的需要是字符串形式，所以gv外需要包一层ts调用\n                // 形成filter[\"b\"](filter[\"a\"](ts(gv(...))))\n                //\n                // 当variableName以*起始时，忽略ts调用，直接传递原值给filter\n                var filterCharIndex = text.indexOf('|');\n                var variableName = (\n                        filterCharIndex > 0\n                        ? text.slice(0, filterCharIndex)\n                        : text\n                    ).replace(/^\\s+/, '').replace(/\\s+$/, '');\n                var filterSource = filterCharIndex > 0\n                    ? text.slice(filterCharIndex + 1)\n                    : '';\n\n                var variableRawValue = variableName.indexOf('*') === 0;\n                var variableCode = [\n                    variableRawValue ? '' : toStringHead,\n                    toGetVariableLiteral(variableName),\n                    variableRawValue ? '' : toStringFoot\n                ];\n\n                if (filterSource) {\n                    filterSource = compileVariable(filterSource, engine);\n                    var filterSegs = filterSource.split('|');\n                    for (var i = 0, len = filterSegs.length; i < len; i++) {\n                        var seg = filterSegs[i];\n                        var segMatch = seg.match(/^\\s*([a-z0-9_-]+)(\\((.*)\\))?\\s*$/i);\n                        if (segMatch) {\n                            variableCode.unshift('fs[\"' + segMatch[1] + '\"](');\n\n                            if (segMatch[3]) {\n                                variableCode.push(',', segMatch[3]);\n                            }\n\n                            variableCode.push(')');\n                        }\n                    }\n                }\n\n                code.push(\n                    wrapHead,\n                    variableCode.join(''),\n                    wrapFoot\n                );\n            },\n\n            function (text) {\n                code.push(\n                    wrapHead,\n                    forText ? stringLiteralize(text) : text,\n                    wrapFoot\n                );\n            }\n        );\n\n        return code.join('');\n    }\n\n    /**\n     * 文本节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 文本节点的内容文本\n     * @param {Engine} engine 引擎实例\n     */\n    function TextNode(value, engine) {\n        this.value = value;\n        this.engine = engine;\n    }\n\n    TextNode.prototype = {\n        /**\n         * 获取renderer body的生成代码\n         *\n         * @return {string} 生成代码\n         */\n        getRendererBody: function () {\n            var value = this.value;\n            var options = this.engine.options;\n\n            if (!value\n                || (options.strip && /^\\s*$/.test(value))\n            ) {\n                return '';\n            }\n\n            return compileVariable(value, this.engine, 1);\n        },\n\n        /**\n         * 复制节点的方法\n         *\n         * @return {TextNode} 节点复制对象\n         */\n        clone: function () {\n            return this;\n        }\n    };\n\n    /**\n     * 命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function Command(value, engine) {\n        this.value = value;\n        this.engine = engine;\n        this.children = [];\n        this.cloneProps = [];\n    }\n\n    Command.prototype = {\n        /**\n         * 添加子节点\n         *\n         * @param {TextNode|Command} node 子节点\n         */\n        addChild: function (node) {\n            this.children.push(node);\n        },\n\n        /**\n         * 节点open，解析开始\n         *\n         * @param {Object} context 语法分析环境对象\n         */\n        open: function (context) {\n            var parent = context.stack.top();\n            parent && parent.addChild(this);\n            context.stack.push(this);\n        },\n\n        /**\n         * 节点闭合，解析结束\n         *\n         * @param {Object} context 语法分析环境对象\n         */\n        close: function (context) {\n            if (context.stack.top() === this) {\n                context.stack.pop();\n            }\n        },\n\n        /**\n         * 获取renderer body的生成代码\n         *\n         * @return {string} 生成代码\n         */\n        getRendererBody: function () {\n            var buf = [];\n            var children = this.children;\n            for (var i = 0; i < children.length; i++) {\n                buf.push(children[i].getRendererBody());\n            }\n\n            return buf.join('');\n        },\n\n        /**\n         * 复制节点的方法\n         *\n         * @return {Command} 节点复制对象\n         */\n        clone: function () {\n            var Clazz = this.constructor;\n            var node = new Clazz(this.value, this.engine);\n\n            /* eslint-disable no-redeclare */\n            for (var i = 0, l = this.children.length; i < l; i++) {\n                node.addChild(this.children[i].clone());\n            }\n\n            for (var i = 0, l = this.cloneProps.length; i < l; i++) {\n                var prop = this.cloneProps[i];\n                node[prop] = this[prop];\n            }\n            /* eslint-enable no-redeclare */\n\n            return node;\n        }\n    };\n\n    /**\n     * 命令自动闭合\n     *\n     * @inner\n     * @param {Object} context 语法分析环境对象\n     * @param {Function=} CommandType 自闭合的节点类型\n     * @return {Command} 被闭合的节点\n     */\n    function autoCloseCommand(context, CommandType) {\n        var stack = context.stack;\n        var closeEnd = CommandType\n            ? stack.find(\n                function (item) {\n                    return item instanceof CommandType;\n                }\n            )\n            : stack.bottom();\n\n        if (closeEnd) {\n            var node;\n\n            while ((node = stack.top()) !== closeEnd) {\n                /* jshint ignore:start */\n                // 如果节点对象不包含autoClose方法\n                // 则认为该节点不支持自动闭合，需要抛出错误\n                // for等节点不支持自动闭合\n                if (!node.autoClose) {\n                    throw new Error(node.type + ' must be closed manually: ' + node.value);\n                }\n                /* jshint ignore:end */\n\n                node.autoClose(context);\n            }\n\n            closeEnd.close(context);\n        }\n\n        return closeEnd;\n    }\n\n    /**\n     * renderer body起始代码段\n     *\n     * @inner\n     * @const\n     * @type {string}\n     */\n    var RENDERER_BODY_START = ''\n        + 'data=data||{};'\n        + 'var v={},fs=engine.filters,hg=typeof data.get==\"function\",'\n        + 'gv=function(n,ps){'\n        +     'var p=ps[0],d=v[p];'\n        +     'if(d==null){'\n        +         'if(hg){return data.get(n);}'\n        +         'd=data[p];'\n        +     '}'\n        +     'for(var i=1,l=ps.length;i<l;i++)if(d!=null)d = d[ps[i]];'\n        +     'return d;'\n        + '},'\n        + 'ts=function(s){'\n        +     'if(typeof s===\"string\"){return s;}'\n        +     'if(s==null){s=\"\";}'\n        +     'return \"\"+s;'\n        + '};';\n\n    // v: variables\n    // fs: filters\n    // gv: getVariable\n    // ts: toString\n    // n: name\n    // ps: properties\n    // hg: hasGetter\n\n    /**\n     * Target命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function TargetCommand(value, engine) {\n        /* jshint ignore:start */\n        var match = value.match(/^\\s*([a-z0-9\\/\\._-]+)\\s*(\\(\\s*master\\s*=\\s*([a-z0-9\\/\\._-]+)\\s*\\))?\\s*/i);\n        if (!match) {\n            throw new Error('Invalid ' + this.type + ' syntax: ' + value);\n        }\n        /* jshint ignore:end */\n\n        this.master = match[3];\n        this.name = match[1];\n        Command.call(this, value, engine);\n\n        this.blocks = {};\n    }\n\n    // 创建Target命令节点继承关系\n    inherits(TargetCommand, Command);\n\n    /**\n     * Block命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function BlockCommand(value, engine) {\n        var match = value.match(/^\\s*([a-z0-9\\/\\._-]+)\\s*$/i);\n        if (!match) {\n            throw new Error('Invalid ' + this.type + ' syntax: ' + value);\n        }\n\n        this.name = match[1];\n        Command.call(this, value, engine);\n        this.cloneProps = ['name'];\n    }\n\n    // 创建Block命令节点继承关系\n    inherits(BlockCommand, Command);\n\n    /**\n     * Import命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function ImportCommand(value, engine) {\n        var match = value.match(/^\\s*([a-z0-9\\/\\._-]+)\\s*$/i);\n        if (!match) {\n            throw new Error('Invalid ' + this.type + ' syntax: ' + value);\n        }\n\n        this.name = match[1];\n        Command.call(this, value, engine);\n        this.cloneProps = ['name', 'state', 'blocks', 'target'];\n        this.blocks = {};\n    }\n\n    // 创建Import命令节点继承关系\n    inherits(ImportCommand, Command);\n\n    /**\n     * Var命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function VarCommand(value, engine) {\n        var match = value.match(/^\\s*([a-z0-9_]+)\\s*=([\\s\\S]*)$/i);\n        if (!match) {\n            throw new Error('Invalid ' + this.type + ' syntax: ' + value);\n        }\n\n        this.name = match[1];\n        this.expr = match[2];\n        Command.call(this, value, engine);\n        this.cloneProps = ['name', 'expr'];\n    }\n\n    // 创建Var命令节点继承关系\n    inherits(VarCommand, Command);\n\n    /**\n     * filter命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function FilterCommand(value, engine) {\n        var match = value.match(/^\\s*([a-z0-9_-]+)\\s*(\\(([\\s\\S]*)\\))?\\s*$/i);\n        if (!match) {\n            throw new Error('Invalid ' + this.type + ' syntax: ' + value);\n        }\n\n        this.name = match[1];\n        this.args = match[3];\n        Command.call(this, value, engine);\n        this.cloneProps = ['name', 'args'];\n    }\n\n    // 创建filter命令节点继承关系\n    inherits(FilterCommand, Command);\n\n    /**\n     * Use命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function UseCommand(value, engine) {\n        var match = value.match(/^\\s*([a-z0-9\\/\\._-]+)\\s*(\\(([\\s\\S]*)\\))?\\s*$/i);\n        if (!match) {\n            throw new Error('Invalid ' + this.type + ' syntax: ' + value);\n        }\n\n        this.name = match[1];\n        this.args = match[3];\n        Command.call(this, value, engine);\n        this.cloneProps = ['name', 'args'];\n    }\n\n    // 创建Use命令节点继承关系\n    inherits(UseCommand, Command);\n\n    /**\n     * for命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function ForCommand(value, engine) {\n        var rule = new RegExp(\n            stringFormat(\n                /* jshint ignore:start */\n                '^\\\\s*({0}[\\\\s\\\\S]+{1})\\\\s+as\\\\s+{0}([0-9a-z_]+){1}\\\\s*(,\\\\s*{0}([0-9a-z_]+){1})?\\\\s*$',\n                /* jshint ignore:end */\n                regexpLiteral(engine.options.variableOpen),\n                regexpLiteral(engine.options.variableClose)\n            ),\n            'i'\n        );\n\n\n        var match = value.match(rule);\n        if (!match) {\n            throw new Error('Invalid ' + this.type + ' syntax: ' + value);\n        }\n\n        this.list = match[1];\n        this.item = match[2];\n        this.index = match[4];\n        Command.call(this, value, engine);\n        this.cloneProps = ['list', 'item', 'index'];\n    }\n\n    // 创建for命令节点继承关系\n    inherits(ForCommand, Command);\n\n    /**\n     * if命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function IfCommand(value, engine) {\n        Command.call(this, value, engine);\n    }\n\n    // 创建if命令节点继承关系\n    inherits(IfCommand, Command);\n\n    /**\n     * elif命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function ElifCommand(value, engine) {\n        IfCommand.call(this, value, engine);\n    }\n\n    // 创建elif命令节点继承关系\n    inherits(ElifCommand, IfCommand);\n\n    /**\n     * else命令节点类\n     *\n     * @inner\n     * @constructor\n     * @param {string} value 命令节点的value\n     * @param {Engine} engine 引擎实例\n     */\n    function ElseCommand(value, engine) {\n        Command.call(this, value, engine);\n    }\n\n    // 创建else命令节点继承关系\n    inherits(ElseCommand, IfCommand);\n\n    /**\n     * 初始化的额外行为，保存依赖信息\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    TargetCommand.prototype.init = function (context) {\n        if (this.master) {\n            context.deps[this.master] = true;\n        }\n    };\n\n    /**\n     * 初始化的额外行为，保存依赖信息\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    UseCommand.prototype.init =\n\n    /**\n     * 初始化的额外行为，保存依赖信息\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    ImportCommand.prototype.init = function (context) {\n        context.deps[this.name] = true;\n    };\n\n    /**\n     * Target的节点状态\n     *\n     * @inner\n     */\n    var TargetState = {\n        READING: 1,\n        READED: 2,\n        APPLIED: 3,\n        READY: 4\n    };\n\n    /**\n     * 应用其继承的母版，返回是否成功应用母版\n     *\n     * @return {boolean} 是否成功应用母版\n     */\n    ImportCommand.prototype.applyMaster =\n\n    /**\n     * 应用其继承的母版，返回是否成功应用母版\n     *\n     * @param {string} masterName 模板名称\n     * @return {boolean} 是否成功应用母版\n     */\n    TargetCommand.prototype.applyMaster = function (masterName) {\n        if (this.state >= TargetState.APPLIED) {\n            return 1;\n        }\n\n        var blocks = this.blocks;\n\n        function replaceBlock(node) {\n            var children = node.children;\n\n            if (children instanceof Array) {\n                for (var i = 0, len = children.length; i < len; i++) {\n                    var child = children[i];\n                    if (child instanceof BlockCommand && blocks[child.name]) {\n                        child = children[i] = blocks[child.name];\n                    }\n\n                    replaceBlock(child);\n                }\n            }\n        }\n\n        var master = this.engine.targets[masterName];\n        if (master) {\n            if (master.applyMaster(master.master)) {\n                this.children = master.clone().children;\n                replaceBlock(this);\n                this.state = TargetState.APPLIED;\n                return 1;\n            }\n        }\n        else if (this.engine.options.missTarget === 'error') {\n            throw new Error('[ETPL_MISS_TARGET]' + masterName\n                + ', when extended by '\n                + (this.target ? this.target.name : this.name)\n            );\n        }\n    };\n\n    /**\n     * 判断target是否ready\n     * 包括是否成功应用母版，以及import语句依赖的target是否ready\n     *\n     * @return {boolean} target是否ready\n     */\n    TargetCommand.prototype.isReady = function () {\n        if (this.state >= TargetState.READY) {\n            return 1;\n        }\n\n        var engine = this.engine;\n        var targetName = this.name;\n        var readyState = 1;\n\n        /**\n         * 递归检查节点的ready状态\n         *\n         * @inner\n         * @param {Command|TextNode} node 目标节点\n         */\n        function checkReadyState(node) {\n            for (var i = 0, len = node.children.length; i < len; i++) {\n                var child = node.children[i];\n\n                if (child instanceof ImportCommand) {\n                    var target = engine.targets[child.name];\n                    if (!target && engine.options.missTarget === 'error') {\n                        throw new Error('[ETPL_MISS_TARGET]' + child.name\n                            + ', when imported by ' + targetName);\n                    }\n\n                    readyState = readyState && target && target.isReady(engine);\n                }\n                else if (child instanceof Command) {\n                    checkReadyState(child);\n                }\n            }\n        }\n\n        if (this.applyMaster(this.master)) {\n            checkReadyState(this);\n            readyState && (this.state = TargetState.READY);\n            return readyState;\n        }\n    };\n\n    /**\n     * 获取target的renderer函数\n     *\n     * @return {function(Object):string} renderer函数\n     */\n    TargetCommand.prototype.getRenderer = function () {\n        if (this.renderer) {\n            return this.renderer;\n        }\n\n        if (this.isReady()) {\n            // console.log(this.name + ' ------------------');\n            // console.log(RENDERER_BODY_START + RENDER_STRING_DECLATION\n            //     + this.getRendererBody()\n            //     + RENDER_STRING_RETURN);\n\n            /* jshint -W054 */\n            var realRenderer = new Function(\n                'data', 'engine',\n                [\n                    RENDERER_BODY_START,\n                    RENDER_STRING_DECLATION,\n                    this.getRendererBody(),\n                    RENDER_STRING_RETURN\n                ].join('\\n')\n            );\n            /* jshint +W054 */\n\n            var engine = this.engine;\n            this.renderer = function (data) {\n                return realRenderer(data, engine);\n            };\n\n            return this.renderer;\n        }\n\n        return null;\n    };\n\n    /**\n     * 将target节点对象添加到语法分析环境中\n     *\n     * @inner\n     * @param {TargetCommand} target target节点对象\n     * @param {Object} context 语法分析环境对象\n     */\n    function addTargetToContext(target, context) {\n        context.target = target;\n\n        var engine = context.engine;\n        var name = target.name;\n\n        if (engine.targets[name]) {\n            switch (engine.options.namingConflict) {\n                /* jshint ignore:start */\n                case 'override':\n                    engine.targets[name] = target;\n                    context.targets.push(name);\n                case 'ignore':\n                    break;\n                /* jshint ignore:end */\n                default:\n                    throw new Error('[ETPL_TARGET_EXISTS]' + name);\n            }\n        }\n        else {\n            engine.targets[name] = target;\n            context.targets.push(name);\n        }\n    }\n\n    /**\n     * target节点open，解析开始\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    TargetCommand.prototype.open = function (context) {\n        autoCloseCommand(context);\n        Command.prototype.open.call(this, context);\n        this.state = TargetState.READING;\n        addTargetToContext(this, context);\n    };\n\n    /**\n     * Var节点open，解析开始\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    VarCommand.prototype.open =\n\n    /**\n     * Use节点open，解析开始\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    UseCommand.prototype.open = function (context) {\n        context.stack.top().addChild(this);\n    };\n\n    /**\n     * Block节点open，解析开始\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    BlockCommand.prototype.open = function (context) {\n        Command.prototype.open.call(this, context);\n        context.stack\n            .find(function (node) {\n                return node.blocks;\n            })\n            .blocks[this.name] = this;\n    };\n\n    /**\n     * elif节点open，解析开始\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    ElifCommand.prototype.open = function (context) {\n        var elseCommand = new ElseCommand();\n        elseCommand.open(context);\n\n        var ifCommand = autoCloseCommand(context, IfCommand);\n        ifCommand.addChild(this);\n        context.stack.push(this);\n    };\n\n    /**\n     * else节点open，解析开始\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    ElseCommand.prototype.open = function (context) {\n        var ifCommand = autoCloseCommand(context, IfCommand);\n        ifCommand.addChild(this);\n        context.stack.push(this);\n    };\n\n    /**\n     * import节点open，解析开始\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    ImportCommand.prototype.open = function (context) {\n        this.parent = context.stack.top();\n        this.target = context.target;\n        Command.prototype.open.call(this, context);\n        this.state = TargetState.READING;\n    };\n\n    /**\n     * 节点解析结束\n     * 由于use节点无需闭合，处理时不会入栈，所以将close置为空函数\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    UseCommand.prototype.close =\n\n    /**\n     * 节点解析结束\n     * 由于var节点无需闭合，处理时不会入栈，所以将close置为空函数\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    VarCommand.prototype.close = function () {};\n\n    /**\n     * 节点解析结束\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    ImportCommand.prototype.close = function (context) {\n        Command.prototype.close.call(this, context);\n        this.state = TargetState.READED;\n    };\n\n    /**\n     * 节点闭合，解析结束\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    TargetCommand.prototype.close = function (context) {\n        Command.prototype.close.call(this, context);\n        this.state = this.master ? TargetState.READED : TargetState.APPLIED;\n        context.target = null;\n    };\n\n    /**\n     * 节点自动闭合，解析结束\n     * ImportCommand的自动结束逻辑为，在其开始位置后马上结束\n     * 所以，其自动结束时children应赋予其所属的parent\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    ImportCommand.prototype.autoClose = function (context) {\n        // move children to parent\n        var parentChildren = this.parent.children;\n        parentChildren.push.apply(parentChildren, this.children);\n        this.children.length = 0;\n\n        // move blocks to target\n        /* eslint-disable guard-for-in */\n        for (var key in this.blocks) {\n            this.target.blocks[key] = this.blocks[key];\n        }\n        /* eslint-enable guard-for-in */\n        this.blocks = {};\n\n        // do close\n        this.close(context);\n    };\n\n    /**\n     * 节点open前的处理动作：节点不在target中时，自动创建匿名target\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    Command.prototype.beforeOpen =\n\n    /**\n     * 文本节点被添加到分析环境前的处理动作：节点不在target中时，自动创建匿名target\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    TextNode.prototype.beforeAdd = function (context) {\n        if (context.stack.bottom()) {\n            return;\n        }\n\n        var target = new TargetCommand(generateGUID(), context.engine);\n        target.open(context);\n    };\n\n    /**\n     * 节点open前的处理动作：target 不需要自动创建target，所以清空方法\n     *\n     * @param {Object} context 语法分析环境对象\n     */\n    TargetCommand.prototype.beforeOpen = function () {};\n\n    /**\n     * 获取renderer body的生成代码\n     *\n     * @return {string} 生成代码\n     */\n    ImportCommand.prototype.getRendererBody = function () {\n        this.applyMaster(this.name);\n        return Command.prototype.getRendererBody.call(this);\n    };\n\n    /**\n     * 获取renderer body的生成代码\n     *\n     * @return {string} 生成代码\n     */\n    UseCommand.prototype.getRendererBody = function () {\n        return stringFormat(\n            '{0}engine.render({2},{{3}}){1}',\n            RENDER_STRING_ADD_START,\n            RENDER_STRING_ADD_END,\n            stringLiteralize(this.name),\n            compileVariable(this.args, this.engine).replace(\n                /(^|,)\\s*([a-z0-9_]+)\\s*=/ig,\n                function (match, start, argName) {\n                    return (start || '') + stringLiteralize(argName) + ':';\n                }\n            )\n        );\n    };\n\n    /**\n     * 获取renderer body的生成代码\n     *\n     * @return {string} 生成代码\n     */\n    VarCommand.prototype.getRendererBody = function () {\n        if (this.expr) {\n            return stringFormat(\n                'v[{0}]={1};',\n                stringLiteralize(this.name),\n                compileVariable(this.expr, this.engine)\n            );\n        }\n\n        return '';\n    };\n\n    /**\n     * 获取renderer body的生成代码\n     *\n     * @return {string} 生成代码\n     */\n    IfCommand.prototype.getRendererBody = function () {\n        return stringFormat(\n            'if({0}){{1}}',\n            compileVariable(this.value, this.engine),\n            Command.prototype.getRendererBody.call(this)\n        );\n    };\n\n    /**\n     * 获取renderer body的生成代码\n     *\n     * @return {string} 生成代码\n     */\n    ElseCommand.prototype.getRendererBody = function () {\n        return stringFormat(\n            '}else{{0}',\n            Command.prototype.getRendererBody.call(this)\n        );\n    };\n\n    /**\n     * 获取renderer body的生成代码\n     *\n     * @return {string} 生成代码\n     */\n    ForCommand.prototype.getRendererBody = function () {\n        return stringFormat(\n            /* jshint ignore:start */\n            ''\n            + 'var {0}={1};'\n            + 'if({0} instanceof Array)'\n            +     'for (var {4}=0,{5}={0}.length;{4}<{5};{4}++){v[{2}]={4};v[{3}]={0}[{4}];{6}}'\n            + 'else if(typeof {0}===\"object\")'\n            +     'for(var {4} in {0}){v[{2}]={4};v[{3}]={0}[{4}];{6}}',\n            /* jshint ignore:end */\n            generateGUID(),\n            compileVariable(this.list, this.engine),\n            stringLiteralize(this.index || generateGUID()),\n            stringLiteralize(this.item),\n            generateGUID(),\n            generateGUID(),\n            Command.prototype.getRendererBody.call(this)\n        );\n    };\n\n    /**\n     * 获取renderer body的生成代码\n     *\n     * @return {string} 生成代码\n     */\n    FilterCommand.prototype.getRendererBody = function () {\n        var args = this.args;\n        return stringFormat(\n            '{2}fs[{5}]((function(){{0}{4}{1}})(){6}){3}',\n            RENDER_STRING_DECLATION,\n            RENDER_STRING_RETURN,\n            RENDER_STRING_ADD_START,\n            RENDER_STRING_ADD_END,\n            Command.prototype.getRendererBody.call(this),\n            stringLiteralize(this.name),\n            args ? ',' + compileVariable(args, this.engine) : ''\n        );\n    };\n\n    /**\n     * 添加命令类型\n     *\n     * @inner\n     * @param {Engine} engine etpl引擎\n     * @param {string} name 命令名称\n     * @param {Function} Type 处理命令用到的类\n     */\n    function addCommandType(engine, name, Type) {\n        engine.commandTypes[name] = Type;\n        Type.prototype.type = name;\n    }\n\n    /**\n     * etpl引擎类\n     *\n     * @constructor\n     * @param {Object=} options 引擎参数\n     * @param {string=} options.commandOpen 命令语法起始串\n     * @param {string=} options.commandClose 命令语法结束串\n     * @param {string=} options.variableOpen 变量语法起始串\n     * @param {string=} options.variableClose 变量语法结束串\n     * @param {string=} options.defaultFilter 默认变量替换的filter\n     * @param {boolean=} options.strip 是否清除命令标签前后的空白字符\n     * @param {string=} options.namingConflict target名字冲突时的处理策略\n     * @param {string=} options.missTarget target不存在时的处理策略\n     */\n    function Engine(options) {\n        this.options = {\n            commandOpen: '<!--',\n            commandClose: '-->',\n            commandSyntax: /^\\s*(\\/)?([a-z]*)\\s*(?::([\\s\\S]*))?$/,\n            variableOpen: '${',\n            variableClose: '}',\n            defaultFilter: 'html'\n        };\n\n        this.commandTypes = {};\n        addCommandType(this, 'target', TargetCommand);\n        addCommandType(this, 'block', BlockCommand);\n        addCommandType(this, 'import', ImportCommand);\n        addCommandType(this, 'use', UseCommand);\n        addCommandType(this, 'var', VarCommand);\n        addCommandType(this, 'for', ForCommand);\n        addCommandType(this, 'if', IfCommand);\n        addCommandType(this, 'elif', ElifCommand);\n        addCommandType(this, 'else', ElseCommand);\n        addCommandType(this, 'filter', FilterCommand);\n\n        this.config(options);\n        this.targets = {};\n        this.filters = extend({}, DEFAULT_FILTERS);\n    }\n\n    /**\n     * 配置引擎参数，设置的参数将被合并到现有参数中\n     *\n     * @param {Object} options 参数对象\n     * @param {string=} options.commandOpen 命令语法起始串\n     * @param {string=} options.commandClose 命令语法结束串\n     * @param {string=} options.variableOpen 变量语法起始串\n     * @param {string=} options.variableClose 变量语法结束串\n     * @param {string=} options.defaultFilter 默认变量替换的filter\n     * @param {boolean=} options.strip 是否清除命令标签前后的空白字符\n     * @param {string=} options.namingConflict target名字冲突时的处理策略\n     * @param {string=} options.missTarget target不存在时的处理策略\n     */\n    Engine.prototype.config = function (options) {\n        extend(this.options, options);\n    };\n\n    /**\n     * 解析模板并编译，返回第一个target编译后的renderer函数。\n     *\n     * @param {string} source 模板源代码\n     * @return {function(Object):string} renderer函数\n     */\n    Engine.prototype.compile =\n\n    /**\n     * 解析模板并编译，返回第一个target编译后的renderer函数。\n     * 该方法的存在为了兼容老模板引擎\n     *\n     * @param {string} source 模板源代码\n     * @return {function(Object):string} renderer函数\n     */\n    Engine.prototype.parse = function (source) {\n        /* jshint -W054 */\n        var renderer = new Function('return \"\"');\n        /* jshint +W054 */\n\n        if (source) {\n            var parseInfo = parseSource(source, this);\n            var targetNames = parseInfo.targets;\n\n            if (targetNames.length) {\n                renderer = this.targets[targetNames[0]].getRenderer();\n            }\n        }\n\n\n        return renderer;\n    };\n\n    /**\n     * 根据target名称获取编译后的renderer函数\n     *\n     * @param {string} name target名称\n     * @return {function(Object):string} renderer函数\n     */\n    Engine.prototype.getRenderer = function (name) {\n        var target = this.targets[name];\n        if (target) {\n            return target.getRenderer();\n        }\n    };\n\n    /**\n     * 执行模板渲染，返回渲染后的字符串。\n     *\n     * @param {string} name target名称\n     * @param {Object=} data 模板数据。\n     *      可以是plain object，\n     *      也可以是带有 {string}get({string}name) 方法的对象\n     * @return {string} 渲染结果\n     */\n    Engine.prototype.render = function (name, data) {\n        var renderer = this.getRenderer(name);\n        if (renderer) {\n            return renderer(data);\n        }\n\n        return '';\n    };\n\n    /**\n     * 增加命令\n     *\n     * @param {string} name 命令名称\n     * @param {Object|Function} command 命令对象或命令类\n     */\n    Engine.prototype.addCommand = function (name, command) {\n        var CommandType = command;\n        if ('function' !== typeof CommandType) {\n            CommandType = function (value, engine) {\n                Command.call(this, value, engine);\n            };\n\n            CommandType.prototype = command;\n        }\n\n        inherits(CommandType, Command);\n        addCommandType(this, name, CommandType);\n    };\n\n    /**\n     * 增加过滤器\n     *\n     * @param {string} name 过滤器名称\n     * @param {Function} filter 过滤函数\n     */\n    Engine.prototype.addFilter = function (name, filter) {\n        if ('function' === typeof filter) {\n            this.filters[name] = filter;\n        }\n    };\n\n    /**\n     * 解析源代码\n     *\n     * @inner\n     * @param {string} source 模板源代码\n     * @param {Engine} engine 引擎实例\n     * @return {Array} target名称列表\n     */\n    function parseSource(source, engine) {\n        var commandOpen = engine.options.commandOpen;\n        var commandClose = engine.options.commandClose;\n        var commandSyntax = engine.options.commandSyntax;\n\n        var stack = new Stack();\n        var analyseContext = {\n            engine: engine,\n            targets: [],\n            stack: stack,\n            target: null,\n            deps: {}\n        };\n\n        // text节点内容缓冲区，用于合并多text\n        var textBuf = [];\n\n        /**\n         * 将缓冲区中的text节点内容写入\n         *\n         * @inner\n         */\n        function flushTextBuf() {\n            var text;\n            if (textBuf.length > 0 && (text = textBuf.join(''))) {\n                var textNode = new TextNode(text, engine);\n                textNode.beforeAdd(analyseContext);\n\n                stack.top().addChild(textNode);\n                textBuf = [];\n\n                if (engine.options.strip\n                    && analyseContext.current instanceof Command\n                ) {\n                    textNode.value = text.replace(/^[\\x20\\t\\r]*\\n/, '');\n                }\n                analyseContext.current = textNode;\n            }\n        }\n\n        var NodeType;\n\n        parseTextBlock(\n            source, commandOpen, commandClose, 0,\n\n            function (text) { // <!--...-->内文本的处理函数\n                var match = commandSyntax.exec(text);\n                var nodeName;\n\n                // 符合command规则，并且存在相应的Command类，说明是合法有含义的Command\n                // 否则，为不具有command含义的普通文本\n                if (match\n                    && (nodeName = match[2] || 'target')\n                    && (NodeType = engine.commandTypes[nodeName.toLowerCase()])\n                    && typeof NodeType === 'function'\n                ) {\n                    // 先将缓冲区中的text节点内容写入\n                    flushTextBuf();\n\n                    var currentNode = analyseContext.current;\n                    if (engine.options.strip && currentNode instanceof TextNode) {\n                        currentNode.value = currentNode.value\n                            .replace(/\\r?\\n[\\x20\\t]*$/, '\\n');\n                    }\n\n                    if (match[1]) {\n                        currentNode = autoCloseCommand(analyseContext, NodeType);\n                    }\n                    else {\n                        currentNode = new NodeType(match[3], engine);\n\n                        if ('function' === typeof currentNode.init) {\n                            currentNode.init(analyseContext);\n                        }\n\n                        currentNode.beforeOpen(analyseContext);\n                        currentNode.open(analyseContext);\n                    }\n\n                    analyseContext.current = currentNode;\n                }\n                else if (!/^\\s*\\/\\//.test(text)) {\n                    // 如果不是模板注释，则作为普通文本，写入缓冲区\n                    textBuf.push(commandOpen, text, commandClose);\n                }\n\n                NodeType = null;\n            },\n\n            function (text) { // <!--...-->外，普通文本的处理函数\n                // 普通文本直接写入缓冲区\n                textBuf.push(text);\n            }\n        );\n\n\n        flushTextBuf(); // 将缓冲区中的text节点内容写入\n        autoCloseCommand(analyseContext);\n\n        var deps = [];\n        for (var key in analyseContext.deps) {\n            deps.push(key);\n        }\n\n        return {\n            targets: analyseContext.targets,\n            deps: deps\n        };\n    }\n\n    // export object\n    var etpl = new Engine();\n    etpl.Engine = Engine;\n    etpl.version = '3.2.0';\n    etpl.Command = Command;\n    etpl.util = {\n        inherits: inherits,\n        stringFormat: stringFormat,\n        stringLiteralize: stringLiteralize,\n        compileVariable: compileVariable,\n        parseSource: parseSource\n    };\n\n\n    return skylark.attach(\"intg.templating.etpl\",etpl);\n\n});\ndefine('skylark-etpl', ['skylark-etpl/main'], function (main) { return main; });\n\n"]}